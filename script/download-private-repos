#!/usr/bin/env bash
set -e

# Folder setup
DFSCRIPTSDIR=$(dirname $0)
cd $DFSCRIPTSDIR/..
DOTFILESDIR=$(pwd -P)

# Terminal colours and utils
source script/terminal
source script/utils

# Are we skipping section
[[ -z "$SKIP_PRIVATE_REPO_INSTALL" ]] || return 0

# GitHub URLs
GITHUB_BASE=https://github.com

# Install some prerequisites. Required programs: [none]
install_prerequisites

# Source secrets file
[[ -f ~/.secrets ]] && source ~/.secrets

# Do we have a GitHub Username and Token
[[ -z "$GITHUB_USER" ]] && {
    error "No GitHub User found. Please make sure a GitHub user is setup and stored in a file called .secrets in your home file with the contents GITHUB_USER=username"
    return
}
[[ -z "$GITHUB_TOKEN" ]] && {
    error "No GitHub Token found. Please make sure a token is setup and stored in a file called .secrets in your home file with the contents GITHUB_TOKEN=xxxx"
    return
}

# Create a login variable
GH_LOGIN="$GITHUB_USER:$GITHUB_TOKEN"

# Get the list of repos
REPO_LIST=$DOTFILESDIR/private/.repos

# Does the repo list file exist
[[ -f "$REPO_LIST" ]] || {
    warning "No private repo list found. Skipping..."
    return
}

# Change directories to the private repo storage
cd $DOTFILESDIR/private

# Loop through each line in the file
while IFS= read -r line || [[ -n "$line" ]]; do

    # Reset variables
    URL_HAS_USER=0
    URL_HAS_SCHEME=0

    # Skip lines that are comments
    [[ ${line:0:1} == "#" ]] && continue

    # Is the line in the format USER/REPO or REPO
    [[ $line =~ [A-Za-z0-9_\-]*\/[A-Za-z0-9_\-]*$ ]] && URL_HAS_USER=1

    # Does the line have a full URL (starts with http/https)
    [[ $line =~ ^https?:\/\/ ]] && URL_HAS_SCHEME=1

    # Get the repo name so we can check if it already exists
    REPO_NAME=$(echo $line | sed 's/.*\/\([A-Za-z0-9\-_]*\)/\1/g')
    [[ $URL_HAS_USER == 0 ]] && [[ $URL_HAS_SCHEME == 0 ]] && REPO_NAME=$line

    # Drop .git from the repo name if it exists
    REPO_NAME=${REPO_NAME/.git/}

    # Print a message to the terminal
    line "Cloning private repo $line..."

    # Does the directory already exist
    [[ -d $DOTFILESDIR/private/$REPO_NAME ]] && {
        warning "Private repo '$REPO_NAME' has already been cloned. Skipping"
        continue
    }

    # Set up the REPO_URL variable
    REPO_URL=$line
    [[ $URL_HAS_USER == 0 ]] && REPO_URL="$GITHUB_USER/$line"
    [[ $URL_HAS_SCHEME == 0 ]] && REPO_URL="https://$GH_LOGIN@github.com/$REPO_URL"
    REPO_URL=${REPO_URL%.git}

    # Check that the git remote exists
    if git ls-remote $REPO_URL -h &> /dev/null; then

        # Initiate a clone of the repo
        git clone $REPO_URL
    
    fi

# End the loop and pass in our repo list file
done < $REPO_LIST

# Change directory back
cd $DOTFILESDIR